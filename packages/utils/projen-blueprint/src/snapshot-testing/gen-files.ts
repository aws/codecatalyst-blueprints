export function generateFilesTs(globs: string[]) {
  return `
// ~~ This file is owned by caws-blueprints and is generated by projen. To modify, edit .projenrc.js and run "npx projen".
import * as fs from 'fs';
import * as fsPromises from 'fs/promises';
import * as globule from 'globule';
import * as path from 'path';

export function getFilenamesInPath(p: fs.PathLike): fs.PathLike[] {
  if (!fs.existsSync(p)) {
    return [];
  }

  const dirFilenames: string[] = [];
  const dir = fs.opendirSync(p);
  let entry;

  while ((entry = dir.readSync()) != null) {
    if (entry.isFile()) {
      dirFilenames.push(entry.name);
    }
  }

  return dirFilenames;
}

/**
 * In unit tests, we need both the absolute and the relative paths.
 * The absolute path helps us to access the files on the filesystem. It varies for each test run.
 * The relative path is used to reference a file's snapshot across test runs. It is constant.
 */
interface BlueprintOutputFile {
  absPath: string;
  relPath: string;
}

// eslint-disable-next-line
const GLOBS: string[] = ${JSON.stringify(globs)};

async function* getAllNestedFiles(absOriginalRootPath: string, absCurrentRootPath: string): AsyncGenerator<BlueprintOutputFile> {
  for (const entry of await fsPromises.readdir(absCurrentRootPath)) {
    const entryWithAbsPath = path.resolve(absCurrentRootPath, entry);
    if ((await fsPromises.stat(entryWithAbsPath)).isDirectory()) {
      yield* getAllNestedFiles(absOriginalRootPath, entryWithAbsPath);
    } else {
      const relPathToEntry = path.relative(absOriginalRootPath, absCurrentRootPath);
      const entryWithRelPath = path.join(relPathToEntry, entry);
      const isIncluded = globule.isMatch(GLOBS, entryWithRelPath, { matchBase: true });
      if (isIncluded) {
        yield {
          absPath: entryWithAbsPath,
          relPath: entryWithRelPath
        };
      }
      else {
        console.debug(\`Skipping snapshot testing for <\${entryWithRelPath}>\`);
      }
    }
  }
}

export function getAllBlueprintSnapshottedFilenames(outdir: string) {
  return getAllNestedFiles(outdir, outdir);
}
  `;
}

