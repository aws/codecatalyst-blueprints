{
  "tasks": {
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "tsc --build"
        }
      ]
    },
    "test:compile": {
      "name": "test:compile",
      "description": "compiles the test code"
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "spawn": "test:compile"
        }
      ]
    },
    "build": {
      "name": "build",
      "description": "Full release build (test+compile)",
      "steps": [
        {
          "spawn": "test"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt"
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    },
    "publish:github": {
      "name": "publish:github",
      "description": "Publish this package to GitHub Releases",
      "requiredEnv": [
        "GITHUB_TOKEN",
        "GITHUB_REPOSITORY",
        "GITHUB_REF"
      ],
      "steps": [
        {
          "exec": "errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \"Release.tag_name already exists\" $errout; then cat $errout; exit $exitcode; fi"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "tsc --build -w"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Create an npm tarball",
      "steps": [
        {
          "exec": "mkdir -p dist/js"
        },
        {
          "exec": "yarn pack"
        },
        {
          "exec": "mv *.tgz dist/js/"
        }
      ]
    },
    "default": {
      "name": "default",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "steps": [
        {
          "exec": "npm version patch -no-git-tag-version"
        }
      ]
    },
    "release": {
      "name": "release",
      "description": "Prepare a release from \"main\" branch",
      "env": {
        "RELEASE": "true"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='projen'"
        },
        {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='projen'"
        },
        {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='projen'"
        },
        {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='projen'"
        },
        {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='projen'"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @types/node npm-check-updates standard-version ts-node typescript"
        },
        {
          "exec": "npx projen"
        }
      ]
    },
    "upgrade-projen": {
      "name": "upgrade-projen",
      "description": "upgrade projen",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade projen projen"
        },
        {
          "exec": "npx projen"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node -e \\\"console.log(process.env.PATH)\\\"\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
