// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Blueprint snapshots node14.json configuration matches options.json 1`] = `
"{
  "environment": {
    "name": "default_environment",
    "environmentType": "PRODUCTION"
  },
  "runtime": "Node.js 14",
  "code": {
    "sourceRepositoryName": "ServerlessAppRepo",
    "cloudFormationStackName": "sam-stack-"
  },
  "lambda": {
    "functionName": "SamFirstEndpoint"
  },
  "outdir": "synth/01.snapshot.node14.json"
}
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/.cloud9/runners/SAM Project Builder.run 1`] = `
"{
  "script": [
    "for directory in /projects/* ; do",
    "  if [ -d \\"$directory/.cloud9/runners\\" ]; then",
    "    REPOSITORY_DIR=$directory",
    "  fi",
    "done",
    "cd $REPOSITORY_DIR",
    "sam build"
  ],
  "info": "This runner builds the Serverless Application Model (SAM) Project."
}
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/.cloud9/runners/SAM Project Test Runner.run 1`] = `
"{
  "script": [
    "for directory in /projects/* ; do",
    "  if [ -d \\"$directory/.cloud9/runners\\" ]; then",
    "    REPOSITORY_DIR=$directory",
    "  fi",
    "done",
    "cd $REPOSITORY_DIR",
    "for directory in \\"$REPOSITORY_DIR\\"/* ; do",
    "  if [ -d \\"$directory/hello-world/tests\\" ]; then",
    "    TESTS_DIR=$directory",
    "  fi",
    "done",
    "echo $TESTS_DIR",
    "cd $TESTS_DIR/hello-world",
    "npm install",
    "npm run test"
  ],
  "info": "This runner installs the dependencies, and executes the tests inside the hello-world directory."
}"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/.codecatalyst/scripts/run-tests.sh 1`] = `
"#!/usr/bin/env bash

WORKING_DIR=SamFirstEndpoint/hello-world/
npm install --prefix $WORKING_DIR
npm --prefix $WORKING_DIR run coverage
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/.codecatalyst/workflows/build-and-release.yaml 1`] = `
"Name: build-and-release
SchemaVersion: "1.0"
Triggers:
  - Type: PUSH
    Branches:
      - main
Compute:
  Type: Lambda
  Fleet: Linux.x86-64.Large
Actions:
  build_for_default_environment:
    Identifier: aws/build@v1
    Inputs:
      Sources:
        - WorkflowSource
    Outputs:
      AutoDiscoverReports:
        Enabled: true
        ReportNamePrefix: rpt
      Artifacts:
        - Name: build_result
          Files:
            - "**/*"
    Configuration:
      Steps:
        - Run: . ./.codecatalyst/scripts/run-tests.sh
        - Run: sam build --template-file template.yaml
        - Run: cd .aws-sam/build/
        - Run: sam package --output-template-file packaged.yaml --resolve-s3
            --template-file template.yaml --region us-west-2
    Environment:
      Name: default_environment
      Connections:
        - Name: " "
          Role: " "
  deploy_to_default_environment:
    Identifier: aws/cfn-deploy@v1
    Inputs:
      Artifacts:
        - build_result
    Environment:
      Name: default_environment
      Connections:
        - Name: " "
          Role: " "
    Configuration:
      Parameters:
        region: us-west-2
        name: sam-stack-
        template: .aws-sam/build/packaged.yaml
        no-fail-on-empty-changeset: "1"
        capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/.idea/externalDependencies.xml 1`] = `
"<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
    <component name="ExternalDependencies">
        <plugin id="Docker" />
        <plugin id="JavaScript" />
        <plugin id="JavaScriptDebugger" />
        <plugin id="aws.toolkit" />
        <plugin id="NodeJS" />
        <plugin id="org.jetbrains.plugins.yaml" />
    </component>
</project>
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/.idea/runConfigurations/all_tests_coverage.xml 1`] = `
"<component name="ProjectRunConfigurationManager">
    <configuration default="false" name="all tests coverage" type="js.build_tools.npm">
        <package-json value="$PROJECT_DIR$/SamFirstEndpoint/hello-world/package.json" />
        <command value="run" />
        <scripts>
            <script value="coverage" />
        </scripts>
        <node-interpreter value="project" />
        <envs />
        <method v="2">
            <option name="NpmBeforeRunTask" enabled="true">
                <package-json value="$PROJECT_DIR$/SamFirstEndpoint/hello-world/package.json" />
                <command value="run" />
                <scripts>
                    <script value="test" />
                </scripts>
                <node-interpreter value="project" />
                <envs />
            </option>
        </method>
    </configuration>
</component>
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/.idea/runConfigurations/sam_build.xml 1`] = `
"<component name="ProjectRunConfigurationManager">
    <configuration default="false" name="sam build" type="ShConfigurationType">
        <option name="SCRIPT_TEXT" value="sam build" />
        <option name="INDEPENDENT_SCRIPT_PATH" value="true" />
        <option name="SCRIPT_PATH" value="" />
        <option name="SCRIPT_OPTIONS" value="" />
        <option name="INDEPENDENT_SCRIPT_WORKING_DIRECTORY" value="true" />
        <option name="SCRIPT_WORKING_DIRECTORY" value="$PROJECT_DIR$" />
        <option name="INDEPENDENT_INTERPRETER_PATH" value="true" />
        <option name="INTERPRETER_PATH" value="" />
        <option name="INTERPRETER_OPTIONS" value="" />
        <option name="EXECUTE_IN_TERMINAL" value="false" />
        <option name="EXECUTE_SCRIPT_FILE" value="false" />
        <envs />
        <method v="2" />
    </configuration>
</component>
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/.idea/runConfigurations/sam_local_invoke.xml 1`] = `
"<component name="ProjectRunConfigurationManager">
    <configuration default="false" name="sam local invoke" type="ShConfigurationType">
        <option name="SCRIPT_TEXT" value="sam local invoke SamFirstEndpointFunction --event SamFirstEndpoint/events/event.json" />
        <option name="INDEPENDENT_SCRIPT_PATH" value="true" />
        <option name="SCRIPT_PATH" value="" />
        <option name="SCRIPT_OPTIONS" value="" />
        <option name="INDEPENDENT_SCRIPT_WORKING_DIRECTORY" value="true" />
        <option name="SCRIPT_WORKING_DIRECTORY" value="$PROJECT_DIR$" />
        <option name="INDEPENDENT_INTERPRETER_PATH" value="true" />
        <option name="INTERPRETER_PATH" value="" />
        <option name="INTERPRETER_OPTIONS" value="" />
        <option name="EXECUTE_IN_TERMINAL" value="false" />
        <option name="EXECUTE_SCRIPT_FILE" value="false" />
        <envs />
        <method v="2" />
    </configuration>
</component>
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/.idea/runConfigurations/sam_start_local_api.xml 1`] = `
"<component name="ProjectRunConfigurationManager">
    <configuration default="false" name="sam start local api" type="ShConfigurationType">
        <option name="SCRIPT_TEXT" value="sam local start-api" />
        <option name="INDEPENDENT_SCRIPT_PATH" value="true" />
        <option name="SCRIPT_PATH" value="" />
        <option name="SCRIPT_OPTIONS" value="" />
        <option name="INDEPENDENT_SCRIPT_WORKING_DIRECTORY" value="true" />
        <option name="SCRIPT_WORKING_DIRECTORY" value="$PROJECT_DIR$" />
        <option name="INDEPENDENT_INTERPRETER_PATH" value="true" />
        <option name="INTERPRETER_PATH" value="" />
        <option name="INTERPRETER_OPTIONS" value="" />
        <option name="EXECUTE_IN_TERMINAL" value="false" />
        <option name="EXECUTE_SCRIPT_FILE" value="false" />
        <envs />
        <method v="2" />
    </configuration>
</component>
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/.vscode/extensions.json 1`] = `
"{
    "recommendations": [
        "redhat.vscode-yaml",
        "AmazonWebServices.aws-toolkit-vscode"
    ]
}
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/.vscode/launch.json 1`] = `
"{
    "version": "1.0.0",
    "configurations": [
        {
            "name": "Launch local sam API",
            "request": "launch",
            "type": "chrome",
            "url": "http://localhost:3000",
            "webRoot": "\${workspaceFolder}/SamFirstEndpoint/hello-world",
            "preLaunchTask": "sam: start api"
        },
        {
            "name": "Debug current test file",
            "type": "node",
            "request": "launch",
            "runtimeArgs": [
                "\${workspaceRoot}/SamFirstEndpoint/hello-world/node_modules/.bin/mocha",
                "--inspect-brk",
                "\${relativeFile}",
            ],
            "console": "integratedTerminal",
        },
        {
            "name": "Debug all test files",
            "type": "node",
            "request": "launch",
            "runtimeArgs": [
                "\${workspaceRoot}/SamFirstEndpoint/hello-world/node_modules/.bin/mocha",
                "\${workspaceRoot}/SamFirstEndpoint/hello-world/tests/**/*"
            ],
            "console": "integratedTerminal",
        },
    ]
}
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/.vscode/tasks.json 1`] = `
"{
    "version": "2.0.0",
    "tasks": [
        {
            "type": "npm",
            "script": "install",
            "group": "build",
            "label": "npm: install",
            "detail": "npm install",
            "options": {
                "cwd": "\${workspaceFolder}/SamFirstEndpoint/hello-world"
            }
        },
        {
            "type": "npm",
            "script": "test",
            "group": "test",
            "label": "npm: test",
            "detail": "npm test",
            "options": {
                "cwd": "\${workspaceFolder}/SamFirstEndpoint/hello-world"
            }
        },
        {
            "type": "shell",
            "command": "sam build",
            "label": "sam: build",
            "detail": "sam build",
            "problemMatcher": []
        },
        {
            "type": "shell",
            "command": "sam local invoke SamFirstEndpointFunction --event SamFirstEndpoint/events/event.json",
            "label": "sam: invoke",
            "detail": "sam invoke",
            "problemMatcher": []
        },
        {
            "type": "shell",
            "command": "sam local start-api",
            "label": "sam: start api",
            "detail": "sam start api",
            "isBackground": true,
            "problemMatcher": {
                "pattern": {
                    "regexp": "."
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": ".",
                    "endsPattern": "Running on"
                }
              }
        }
    ]
}
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/README.md 1`] = `
"
## This Project

This project is an AWS Serverless Application Model (SAM) project. A serverless application is a combination of AWS Lambda functions, event sources, and other resources that work together to perform tasks. A
serverless application can also include additional resources such as APIs, databases, and event source mappings. For more information on serverless
applications, see the [AWS Serverless Application Model (SAM) Developer Guide](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html)

The project uses an Amazon CodeCatalyst environment to deploy a SAM application with AWS Lambda and Amazon API Gateway to an Amazon CloudFront URL.
After you create your project, you can view the repository, source code, and continuous integration and continuous delivery (CI/CD) workflow for your
project. After your workflow runs successfully, your deployed [AWS Cloud Development Kit (CDK)](https://docs.aws.amazon.com/cdk/v2/guide/home.html) application URL is available under the output for your workflow.

### Architecture overview

![Architecture diagram](https://d2oq83bpv90sqw.cloudfront.net/SAM-arch.png)

## Connections and permissions

Configure your AWS account connection from the **AWS accounts** tab in your Amazon CodeCatalyst space. Add AWS IAM roles to
the account extension to authorize project workflows to access AWS account resources.

The SAM application requires the following IAM roles to build and deploy the application:

### IAM role trust policy

\`\`\`
{
"Version": "2012-10-17",
"Statement": [
    {
        "Sid": "CodeCatalyst",
        "Effect": "Allow",
        "Principal": {
            "Service": [
                "codecatalyst-runner.amazonaws.com",
                "codecatalyst.amazonaws.com"
            ]
        },
        "Action": "sts:AssumeRole"
    }
]
}
\`\`\`

### Deploy role policy

Create a role based on the trust policy above, and add the following inline policy:

\`\`\`
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "iam:PassRole",
                "iam:DeleteRole",
                "iam:GetRole",
                "iam:TagRole",
                "iam:CreateRole",
                "iam:AttachRolePolicy",
                "iam:DetachRolePolicy",
                "cloudformation:*",
                "lambda:*",
                "apigateway:*"
            ],
            "Resource": "*"
        }
    ]
}
\`\`\`

_Note: You must update the policy if you add more resources.

### Build role policy

Create a role based on the trust policy above, and add the following inline policy:

\`\`\`
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "s3:*",
                "cloudformation:*"
            ],
            "Resource": "*"
        }
    ]
}
\`\`\`

## Project resources

After being successfully created, this project deploys the following AWS resources:

- AWS Lambda function(s) - A resource that invokes your code on a high-availability compute infrastructure without provisioning or managing servers. For
  more information on AWS Lambda, see the [AWS Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/welcome.html)

- Amazon API Gateway - A resource that creates, publishes, maintains, monitors, and secures REST, HTTP, and WebSocket APIs at any scale. For
  more information on API Gateway, see the
  [AWS API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html)

- IAM role(s) -  A resource that secures controlled access to AWS resources such as the AWS Lambda function(s). For more information on IAM, see the
  [AWS IAM User Guide](https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html)

The deployment status can be viewed in the project's workflow.

This blueprint creates the following Amazon CodeCatalyst resources:

- Source repository named \`ServerlessAppRepo\` - A Git repository to store, version, and manage the following project assets:
  - \`SamFirstEndpoint\` - Source code and supporting files for the Lambda function of the application, \`SamFirstEndpoint\` contains the following:
    - \`hello-world\` - Code for the AWS Lambda function of the application
    - \`events\` - Invocation events that you can use to invoke the AWS Lambda function
    - \`hello-world/tests\` - Tests for the AWS Lambda function's code
  - \`template.yaml\` - The template that defines the application's AWS resources, including AWS Lambda functions, Amazon API Gateways, and IAM roles.
  - \`devfile.yaml\` - A devfile that defines Dev Environments or development environments that have been built for the cloud.

  For more information on source repositories, see the _Working with source repositories_ section in the **Amazon CodeCatalyst User Guide**.

- Workflows defined in \`.codecatalyst/workflows/build-and-release.yaml\`

  A workflow is an automated procedure that defines how to build, test, and deploy the serverless application. For more information, see the _Build,
  test, and deploy with workflows_ section of the **Amazon CodeCatalyst User Guide**.

- Environment(s) - An abstraction of infrastructure resources that deploy applications. You can use environments can be used to organize deployment actions into a production or non-production environment.

  For more information on environments, see the _Organizing deployments using environments_ section in the **Amazon CodeCatalyst User Guide**.

- Dev Environment - A cloud-based development environment. A Dev Environment must be manually created with the generated devfile using the Create Dev
  Environment operation in Amazon CodeCatalyst.

  For more information on creating Dev Environments, see the _Working with Dev Environments_ section in the **Amazon CodeCatalyst User Guide**.


## Using the SAM CLI to build and test locally

You can use the SAM Command Line Interface (CLI) to build and test your application locally. The SAM CLI is an extension of the AWS CLI that can emulate your AWS Lambda functions, application build environment, and API. It uses Docker to run your functions in an Amazon Linux environment that matches AWS Lambda. It can also emulate your application's build environment and API.
To work on the sample code generated, clone your project's repository to your local computer. For more information, see the _Cloning a source repository_ section in the Amazon CodeCatalyst User Guide.

To use the SAM CLI, install following tools into your workspace.

  * Install [AWS CLI](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)
  * Install [SAM CLI](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html)
  * Install [Docker community edition](https://hub.docker.com/search/?type=edition&offering=community)
  * Install [Python 3](https://www.python.org/downloads/)
 * Install [Node.js 14 and npm](https://nodejs.org/en/download/releases/)

To build your application locally, run the following command in your shell:

\`\`\`
    sam build
\`\`\`

  The SAM CLI installs dependencies defined in the hello-world//package.json file of the AWS Lambda function, creates a deployment package, and saves it in the \`.aws-sam/build\` folder.
  For more information on sam build, see the [Sam Build Command Reference Guide](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-build.html).
  Test a single function by invoking it directly with a test event. An event is a JSON document that represents the input that the function receives from the event source. Test events are included in the \`events\` folder in each function's folder in this project.

\`\`\`
  sam local invoke <functionName> --event <functionName>/events/event.json
\`\`\`

For more information on sam local invoke, see the [Sam Invoke Command Reference Guide](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-local-invoke.html).
The SAM CLI can also emulate your application's API. Run the \`sam local start-api\` command to run the API locally. The default port is 3000.

\`\`\`
  sam local start-api
  curl http://localhost:3000/
\`\`\`

For more information on sam local start-api, see the [Sam Local Invoke Start-Api Command Reference Guide](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-local-start-api.html).
The SAM CLI reads the application template to determine the API's routes and the functions that they invoke. The \`Events\` property on each function's definition includes the route and method for each path.

\`\`\`yaml
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get
\`\`\`


## Running tests
Tests are defined in the \`hello-world/tests\` folder in this project. Use NPM to install the [Mocha test framework](https://mochajs.org/) and run unit tests.
\`\`\`
$ cd hello-world
$ npm install
$ npm run test
\`\`\`


## Adding a resource to your serverless application
The application template uses SAM to define application resources. AWS SAM is an extension of AWS CloudFormation that uses a different syntax to configure common serverless application resources such as functions, triggers, and APIs. For resources not included in the [SAM specification](https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md), use the standard [AWS CloudFormation](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) resource types.

## Deploying your serverless application
The application is deployed through Amazon CodeCatalyst using the workflow defined in \`.codecatalyst/workflows/build-and-release.yaml\`. The workflow is triggered by pushes to the \`main\` branch of the source repository.
Triggers can be code pushes to a source repository branch or a pull request being created, merged, closed, or revised. For more information on adding or configuring workflow triggers, see the _Working with triggers_ section in the  Amazon CodeCatalyst User Guide.
The workflow builds your application, stores the build artifacts in a generated Amazon S3 bucket, and deploys your application to your project environment \`default_environment\` using the \`sam-stack-\` AWS Cloudformation stack.
For more information on deploying using workflows and organizing deployments by environment, see the _Deploying using CodeCatalyst workflows_ section in the Amazon CodeCatalyst User Guide.

If you still want to deploy without using CI/CD workflows, you can follow these instructions after building the application:
\`\`\`
  cd .aws-sam/build/
  sam package --output-template-file packaged.yaml --resolve-s3 --template-file template.yaml --region <aws-region>
  sam deploy --template-file /projects/ServerlessAppRepo/.aws-sam/build/packaged.yaml --stack-name sam-api-blueprints-test --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND
\`\`\`

## Additional Resources
See the Amazon CodeCatalyst User Guide for additional information on using the features and resources of Amazon CodeCatalyst.
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/events/event.json 1`] = `
"{
  "body": "{\\"message\\": \\"hello world\\"}",
  "resource": "/{proxy+}",
  "path": "/path/to/resource",
  "httpMethod": "POST",
  "isBase64Encoded": false,
  "queryStringParameters": {
    "foo": "bar"
  },
  "pathParameters": {
    "proxy": "/path/to/resource"
  },
  "stageVariables": {
    "baz": "qux"
  },
  "headers": {
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
    "Accept-Encoding": "gzip, deflate, sdch",
    "Accept-Language": "en-US,en;q=0.8",
    "Cache-Control": "max-age=0",
    "CloudFront-Forwarded-Proto": "https",
    "CloudFront-Is-Desktop-Viewer": "true",
    "CloudFront-Is-Mobile-Viewer": "false",
    "CloudFront-Is-SmartTV-Viewer": "false",
    "CloudFront-Is-Tablet-Viewer": "false",
    "CloudFront-Viewer-Country": "US",
    "Host": "1234567890.execute-api.us-east-1.amazonaws.com",
    "Upgrade-Insecure-Requests": "1",
    "User-Agent": "Custom User Agent String",
    "Via": "1.1 08f323deadbeefa7af34d5feb414ce27.cloudfront.net (CloudFront)",
    "X-Amz-Cf-Id": "cDehVQoZnx43VYQb9j2-nvCh-9z396Uhbp027Y2JvkCPNLmGJHqlaA==",
    "X-Forwarded-For": "127.0.0.1, 127.0.0.2",
    "X-Forwarded-Port": "443",
    "X-Forwarded-Proto": "https"
  },
  "requestContext": {
    "accountId": "123456789012",
    "resourceId": "123456",
    "stage": "prod",
    "requestId": "c6af9ac6-7b61-11e6-9a41-93e8deadbeef",
    "requestTime": "09/Apr/2015:12:34:56 +0000",
    "requestTimeEpoch": 1428582896000,
    "identity": {
      "cognitoIdentityPoolId": null,
      "accountId": null,
      "cognitoIdentityId": null,
      "caller": null,
      "accessKey": null,
      "sourceIp": "127.0.0.1",
      "cognitoAuthenticationType": null,
      "cognitoAuthenticationProvider": null,
      "userArn": null,
      "userAgent": "Custom User Agent String",
      "user": null
    },
    "path": "/prod/path/to/resource",
    "resourcePath": "/{proxy+}",
    "httpMethod": "POST",
    "apiId": "1234567890",
    "protocol": "HTTP/1.1"
  }
}
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/hello-world/.eslintignore 1`] = `
"node_modules
.aws-sam"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/hello-world/.eslintrc.js 1`] = `
"module.exports = {
    parser: "@typescript-eslint/parser",
    parserOptions: {
      ecmaVersion: 2020, // Allows for the parsing of modern ECMAScript features
      sourceType: "module" 
    },
    extends: [
      "plugin:@typescript-eslint/recommended", // recommended rules from the @typescript-eslint/eslint-plugin
      "plugin:prettier/recommended" // Enables eslint-plugin-prettier and eslint-config-prettier. This will display prettier errors as ESLint errors. Make sure this is always the last configuration in the extends array.
    ],
    rules: {
      // Place to specify ESLint rules. Can be used to overwrite rules specified from the extended configs
      // e.g. "@typescript-eslint/explicit-function-return-type": "off",
    }
  };"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/hello-world/.npmignore 1`] = `""`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/hello-world/.prettierrc.js 1`] = `
"module.exports = {
    semi: true,
    trailingComma: "all",
    singleQuote: true,
    printWidth: 120,
    tabWidth: 4
  };"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/hello-world/app.ts 1`] = `
"import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';

/**
 *
 * Event doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#api-gateway-simple-proxy-for-lambda-input-format
 * @param {Object} event - API Gateway Lambda Proxy Input Format
 *
 * Return doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
 * @returns {Object} object - API Gateway Lambda Proxy Output Format
 *
 */

export const lambdaHandler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {
    let response: APIGatewayProxyResult;
    try {
        response = {
            statusCode: 200,
            body: JSON.stringify({
                message: 'hello world',
            }),
        };
    } catch (err: unknown) {
        console.log(err);
        response = {
            statusCode: 500,
            body: JSON.stringify({
                message: err instanceof Error ? err.message : 'some error happened',
            }),
        };
    }

    return response;
};
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/hello-world/jest.config.ts 1`] = `
"/*
 * For a detailed explanation regarding each configuration property and type check, visit:
 * https://jestjs.io/docs/configuration
 */

export default {
    transform: {
        '^.+\\\\.ts?$': 'esbuild-jest',
    },
    clearMocks: true,
    collectCoverage: true,
    coverageDirectory: 'coverage',
    coverageProvider: 'v8',
    testMatch: ['**/tests/unit/*.test.ts'],
};
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/hello-world/package.json 1`] = `
"{
  "name": "hello_world",
  "version": "1.0.0",
  "description": "hello world sample for NodeJS",
  "main": "app.js",
  "repository": "https://github.com/awslabs/aws-sam-cli/tree/develop/samcli/local/init/templates/cookiecutter-aws-sam-hello-nodejs",
  "author": "SAM CLI",
  "license": "MIT",
  "dependencies": {
    "esbuild": "^0.14.14"
  },
  "scripts": {
    "unit": "jest",
    "lint": "eslint '*.ts' --quiet --fix",
    "compile": "tsc",
    "test": "npm run compile && npm run unit",
    "coverage": "nyc --reporter clover --reporter text npm test"
  },
  "devDependencies": {
    "@types/aws-lambda": "^8.10.92",
    "@types/jest": "^27.4.0",
    "@types/node": "^17.0.13",
    "@typescript-eslint/eslint-plugin": "^5.10.2",
    "@typescript-eslint/parser": "^5.10.2",
    "esbuild-jest": "^0.5.0",
    "eslint": "^8.8.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-prettier": "^4.0.0",
    "jest": "^27.5.0",
    "prettier": "^2.5.1",
    "ts-node": "^10.4.0",
    "typescript": "^4.5.5",
    "@types/expect": "^24.3.0",
    "@types/mocha": "^10.0.1",
    "chai": "^4.2.0",
    "mocha": "^9.1.4",
    "mocha-junit-reporter": "^2.0.2",
    "nyc": "^15.1.0",
    "ts-mocha": "^10.0.0"
  }
}
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/hello-world/tests/unit/test-handler.test.ts 1`] = `
"import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';
import { lambdaHandler } from '../../app';

describe('Unit test for app handler', function () {
    it('verifies successful response', async () => {
        const event: APIGatewayProxyEvent = {
            httpMethod: 'get',
            body: '',
            headers: {},
            isBase64Encoded: false,
            multiValueHeaders: {},
            multiValueQueryStringParameters: {},
            path: '/hello',
            pathParameters: {},
            queryStringParameters: {},
            requestContext: {
                accountId: '123456789012',
                apiId: '1234',
                authorizer: {},
                httpMethod: 'get',
                identity: {
                    accessKey: '',
                    accountId: '',
                    apiKey: '',
                    apiKeyId: '',
                    caller: '',
                    clientCert: {
                        clientCertPem: '',
                        issuerDN: '',
                        serialNumber: '',
                        subjectDN: '',
                        validity: { notAfter: '', notBefore: '' },
                    },
                    cognitoAuthenticationProvider: '',
                    cognitoAuthenticationType: '',
                    cognitoIdentityId: '',
                    cognitoIdentityPoolId: '',
                    principalOrgId: '',
                    sourceIp: '',
                    user: '',
                    userAgent: '',
                    userArn: '',
                },
                path: '/hello',
                protocol: 'HTTP/1.1',
                requestId: 'c6af9ac6-7b61-11e6-9a41-93e8deadbeef',
                requestTimeEpoch: 1428582896000,
                resourceId: '123456',
                resourcePath: '/hello',
                stage: 'dev',
            },
            resource: '',
            stageVariables: {},
        };
        const result: APIGatewayProxyResult = await lambdaHandler(event);

        expect(result.statusCode).toEqual(200);
        expect(result.body).toEqual(
            JSON.stringify({
                message: 'hello world',
            }),
        );
    });
});
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/hello-world/tsconfig.json 1`] = `
"{
    "compilerOptions": {
      "target": "es2020",
      "strict": true,
      "preserveConstEnums": true,
      "noEmit": true,
      "sourceMap": false,
      "module":"es2015",
      "moduleResolution":"node",
      "esModuleInterop": true, 
      "skipLibCheck": true,
      "forceConsistentCasingInFileNames": true,  
    },
    "exclude": ["node_modules", "**/*.test.ts"]
  }"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/devfile.yaml 1`] = `
"schemaVersion: 2.0.0
metadata:
  name: aws-universal
  version: 1.0.1
  displayName: AWS Universal
  description: Stack with AWS Universal Tooling
  tags:
    - aws
    - a12
  projectType: aws
components:
  - name: aws-runtime
    container:
      image: public.ecr.aws/aws-mde/universal-image:1.0
      mountSources: true
      volumeMounts:
        - name: docker-store
          path: /var/lib/docker
  - name: docker-store
    volume:
      size: 16Gi
events:
  postStart:
    - bootstrap-and-build
commands:
  - id: bootstrap-and-build
    exec:
      commandLine: . ./.codecatalyst/scripts/run-tests.sh && sam build --template-file
        template.yaml
      workingDir: $PROJECT_SOURCE
      component: aws-runtime
"
`;

exports[`Blueprint snapshots node14.json configuration matches src/ServerlessAppRepo/template.yaml 1`] = `
"Transform: AWS::Serverless-2016-10-31
Description: lambdas
Globals:
  Function:
    Timeout: 20
Resources:
  SamFirstEndpointFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SamFirstEndpoint/hello-world/
      Runtime: nodejs14.x
      Handler: app.lambdaHandler
      Description: SamFirstEndpoint
      Events:
          SamFirstEndpoint:
             Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
             Properties:
                Path: /SamFirstEndpoint
                Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints: 
        - app.ts

Outputs:
# ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
# Find out more about other implicit resources you can reference within SAM
# https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  SamFirstEndpointApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://\${ServerlessRestApi}.execute-api.\${AWS::Region}.amazonaws.com/Prod/SamFirstEndpoint/"
  SamFirstEndpointFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt SamFirstEndpointFunction.Arn
  SamFirstEndpointFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt SamFirstEndpointFunctionRole.Arn"
`;

exports[`Blueprint snapshots python39.json configuration matches options.json 1`] = `
"{
  "environment": {
    "name": "default_environment",
    "environmentType": "PRODUCTION"
  },
  "runtime": "Python 3.9",
  "code": {
    "sourceRepositoryName": "ServerlessAppRepo",
    "cloudFormationStackName": "sam-stack-"
  },
  "lambda": {
    "functionName": "SamFirstEndpoint"
  },
  "outdir": "synth/01.snapshot.python39.json"
}
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/.cloud9/runners/SAM Project Builder.run 1`] = `
"{
  "script": [
    "for directory in /projects/* ; do",
    "  if [ -d \\"$directory/.cloud9/runners\\" ]; then",
    "    REPOSITORY_DIR=$directory",
    "  fi",
    "done",
    "cd $REPOSITORY_DIR",
    "sam build"
  ],
  "info": "This runner builds the Serverless Application Model (SAM) Project."
}
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/.cloud9/runners/SAM Project Test Runner.run 1`] = `
"{
  "script": [
    "for directory in /projects/* ; do",
    "  if [ -d \\"$directory/.cloud9/runners\\" ]; then",
    "    REPOSITORY_DIR=$directory",
    "  fi",
    "done",
    "cd $REPOSITORY_DIR",
    "for directory in \\"$REPOSITORY_DIR\\"/* ; do",
    "  if [ -d \\"$directory/tests\\" ]; then",
    "    TESTS_DIR=$directory",
    "  fi",
    "done",
    "cd $TESTS_DIR",
    "pip install -r tests/requirements.txt",
    "python3 -m pytest tests/unit -v"
  ],
  "info": "This runner installs the dependencies, and executes the unit tests inside the tests directory."
}
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/.codecatalyst/scripts/bootstrap.sh 1`] = `
"#!/bin/bash

VENV="venv"

test -d $VENV || python3 -m venv $VENV || return
$VENV/bin/pip install -r SamFirstEndpoint/tests/requirements.txt
$VENV/bin/pip install -r SamFirstEndpoint/hello_world/requirements.txt
. $VENV/bin/activate
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/.codecatalyst/scripts/run-tests.sh 1`] = `
"#!/bin/bash

echo "Running unit tests..."
PYTHONPATH=SamFirstEndpoint pytest --junitxml=test_results.xml --cov-report xml:test_coverage.xml --cov=. SamFirstEndpoint/tests/unit/
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/.codecatalyst/workflows/build-and-release.yaml 1`] = `
"Name: build-and-release
SchemaVersion: "1.0"
Triggers:
  - Type: PUSH
    Branches:
      - main
Compute:
  Type: EC2
  Fleet: Linux.x86-64.Large
Actions:
  build_for_default_environment:
    Identifier: aws/build@v1
    Inputs:
      Sources:
        - WorkflowSource
    Outputs:
      AutoDiscoverReports:
        Enabled: true
        ReportNamePrefix: rpt
      Artifacts:
        - Name: build_result
          Files:
            - "**/*"
    Configuration:
      Steps:
        - Run: . ./.codecatalyst/scripts/bootstrap.sh
        - Run: . ./.codecatalyst/scripts/run-tests.sh
        - Run: sam build --template-file template.yaml --use-container --build-image
            amazon/aws-sam-cli-build-image-python3.9
        - Run: cd .aws-sam/build/
        - Run: sam package --output-template-file packaged.yaml --resolve-s3
            --template-file template.yaml --region us-west-2
    Environment:
      Name: default_environment
      Connections:
        - Name: " "
          Role: " "
  deploy_to_default_environment:
    Identifier: aws/cfn-deploy@v1
    Inputs:
      Artifacts:
        - build_result
    Environment:
      Name: default_environment
      Connections:
        - Name: " "
          Role: " "
    Configuration:
      Parameters:
        region: us-west-2
        name: sam-stack-
        template: .aws-sam/build/packaged.yaml
        no-fail-on-empty-changeset: "1"
        capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/.coveragerc 1`] = `
"[run]
omit = SamFirstEndpoint/tests/integration/*
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/.idea/externalDependencies.xml 1`] = `
"<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
    <component name="ExternalDependencies">
        <plugin id="Docker" />
        <plugin id="Python" />
        <plugin id="aws.toolkit" />
        <plugin id="org.jetbrains.plugins.yaml" />
    </component>
</project>
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/.idea/runConfigurations/application_integration_tests.xml 1`] = `
"<component name="ProjectRunConfigurationManager">
    <configuration default="false" name="application integration tests" type="tests" factoryName="Unittests">
        <module name="ServerlessAppRepo" />
        <option name="INTERPRETER_OPTIONS" value="" />
        <option name="PARENT_ENVS" value="true" />
        <option name="SDK_HOME" value="/usr/local/bin/python3.8" />
        <option name="WORKING_DIRECTORY" value="" />
        <option name="IS_MODULE_SDK" value="false" />
        <option name="ADD_CONTENT_ROOTS" value="true" />
        <option name="ADD_SOURCE_ROOTS" value="true" />
        <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
        <option name="_new_pattern" value="&quot;&quot;" />
        <option name="_new_additionalArguments" value="&quot;&quot;" />
        <option name="_new_target" value="&quot;$PROJECT_DIR$/SamFirstEndpoint/tests/integration&quot;" />
        <option name="_new_targetType" value="&quot;PATH&quot;" />
        <method v="2" />
    </configuration>
</component>
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/.idea/runConfigurations/application_unit_tests.xml 1`] = `
"<component name="ProjectRunConfigurationManager">
    <configuration default="false" name="application unit tests" type="tests" factoryName="Unittests">
        <module name="ServerlessAppRepo" />
        <option name="INTERPRETER_OPTIONS" value="" />
        <option name="PARENT_ENVS" value="true" />
        <option name="SDK_HOME" value="/usr/local/bin/python3.8" />
        <option name="WORKING_DIRECTORY" value="" />
        <option name="IS_MODULE_SDK" value="false" />
        <option name="ADD_CONTENT_ROOTS" value="true" />
        <option name="ADD_SOURCE_ROOTS" value="true" />
        <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
        <option name="_new_pattern" value="&quot;&quot;" />
        <option name="_new_additionalArguments" value="&quot;&quot;" />
        <option name="_new_target" value="&quot;$PROJECT_DIR$/SamFirstEndpoint/tests/unit&quot;" />
        <option name="_new_targetType" value="&quot;PATH&quot;" />
        <method v="2" />
    </configuration>
</component>
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/.idea/runConfigurations/sam_build.xml 1`] = `
"<component name="ProjectRunConfigurationManager">
    <configuration default="false" name="sam build" type="ShConfigurationType">
        <option name="SCRIPT_TEXT" value="sam build" />
        <option name="INDEPENDENT_SCRIPT_PATH" value="true" />
        <option name="SCRIPT_PATH" value="" />
        <option name="SCRIPT_OPTIONS" value="" />
        <option name="INDEPENDENT_SCRIPT_WORKING_DIRECTORY" value="true" />
        <option name="SCRIPT_WORKING_DIRECTORY" value="$PROJECT_DIR$" />
        <option name="INDEPENDENT_INTERPRETER_PATH" value="true" />
        <option name="INTERPRETER_PATH" value="" />
        <option name="INTERPRETER_OPTIONS" value="" />
        <option name="EXECUTE_IN_TERMINAL" value="false" />
        <option name="EXECUTE_SCRIPT_FILE" value="false" />
        <envs />
        <method v="2" />
    </configuration>
</component>
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/.idea/runConfigurations/sam_local_invoke.xml 1`] = `
"<component name="ProjectRunConfigurationManager">
    <configuration default="false" name="sam local invoke" type="ShConfigurationType">
        <option name="SCRIPT_TEXT" value="sam local invoke SamFirstEndpointFunction --event SamFirstEndpoint/events/event.json" />
        <option name="INDEPENDENT_SCRIPT_PATH" value="true" />
        <option name="SCRIPT_PATH" value="" />
        <option name="SCRIPT_OPTIONS" value="" />
        <option name="INDEPENDENT_SCRIPT_WORKING_DIRECTORY" value="true" />
        <option name="SCRIPT_WORKING_DIRECTORY" value="$PROJECT_DIR$" />
        <option name="INDEPENDENT_INTERPRETER_PATH" value="true" />
        <option name="INTERPRETER_PATH" value="" />
        <option name="INTERPRETER_OPTIONS" value="" />
        <option name="EXECUTE_IN_TERMINAL" value="false" />
        <option name="EXECUTE_SCRIPT_FILE" value="false" />
        <envs />
        <method v="2" />
    </configuration>
</component>
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/.idea/runConfigurations/sam_start_local_api.xml 1`] = `
"<component name="ProjectRunConfigurationManager">
    <configuration default="false" name="sam start local api" type="ShConfigurationType">
        <option name="SCRIPT_TEXT" value="sam local start-api" />
        <option name="INDEPENDENT_SCRIPT_PATH" value="true" />
        <option name="SCRIPT_PATH" value="" />
        <option name="SCRIPT_OPTIONS" value="" />
        <option name="INDEPENDENT_SCRIPT_WORKING_DIRECTORY" value="true" />
        <option name="SCRIPT_WORKING_DIRECTORY" value="$PROJECT_DIR$" />
        <option name="INDEPENDENT_INTERPRETER_PATH" value="true" />
        <option name="INTERPRETER_PATH" value="" />
        <option name="INTERPRETER_OPTIONS" value="" />
        <option name="EXECUTE_IN_TERMINAL" value="false" />
        <option name="EXECUTE_SCRIPT_FILE" value="false" />
        <envs />
        <method v="2" />
    </configuration>
</component>
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/.vscode/extensions.json 1`] = `
"{
    "recommendations": [
        "ms-python.python",
        "redhat.vscode-yaml",
        "AmazonWebServices.aws-toolkit-vscode"
    ]
}
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/.vscode/launch.json 1`] = `
"{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Launch local sam API",
            "request": "launch",
            "type": "chrome",
            "url": "http://localhost:3000",
            "webRoot": "\${workspaceFolder}/SamFirstEndpoint/hello_world",
            "preLaunchTask": "sam: start api"
        },
        {
            "name": "Debug current test file",
            "type": "python",
            "request": "launch",
            "module": "pytest",
            "args": [
                "\${file}"
            ]
        },
        {
            "name": "Debug all test files",
            "type": "python",
            "request": "launch",
            "module": "pytest"
        }
    ]
}
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/.vscode/settings.json 1`] = `
"{
    "python.testing.pytestArgs": [
        "python"
    ],
    "python.testing.unittestEnabled": false,
    "python.testing.pytestEnabled": true,
    "python.defaultInterpreterPath": "python"
}
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/.vscode/tasks.json 1`] = `
"{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "python: install",
            "detail": "python install requirements",
            "type": "shell",
            "command": "pip install -r hello_world/requirements.txt && pip install -r tests/requirements.txt",
            "problemMatcher": [],
            "options": {
                "cwd": "\${workspaceFolder}/SamFirstEndpoint"
            }
        },
        {
            "label": "python: run unit tests",
            "detail": "python run unit tests",
            "type": "shell",
            "command": "pytest tests/unit -v",
            "group": "test",
            "problemMatcher": [],
            "options": {
                "cwd": "\${workspaceFolder}/SamFirstEndpoint"
            }
        },
        {
            "label": "python: run integration tests",
            "detail": "python run integration tests",
            "type": "shell",
            "command": "pytest tests/integration -v",
            "group": "test",
            "problemMatcher": [],
            "options": {
                "env": {
                    "AWS_SAM_STACK_NAME": "<stack-name>"
                },
                "cwd": "\${workspaceFolder}/SamFirstEndpoint"
            },
        },
        {
            "type": "shell",
            "command": "sam build",
            "label": "sam: build",
            "detail": "sam build",
            "problemMatcher": []
        },
        {
            "type": "shell",
            "command": "sam local invoke SamFirstEndpointFunction --event SamFirstEndpoint/events/event.json",
            "label": "sam: invoke",
            "detail": "sam invoke",
            "problemMatcher": []
        },
        {
            "type": "shell",
            "command": "sam local start-api",
            "label": "sam: start api",
            "detail": "sam start api",
            "isBackground": true,
            "problemMatcher": {
                "pattern": {
                    "regexp": "."
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": ".",
                    "endsPattern": "Running on"
                }
            }
        }
    ]
}
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/README.md 1`] = `
"
## This Project

This project is an AWS Serverless Application Model (SAM) project. A serverless application is a combination of AWS Lambda functions, event sources, and other resources that work together to perform tasks. A
serverless application can also include additional resources such as APIs, databases, and event source mappings. For more information on serverless
applications, see the [AWS Serverless Application Model (SAM) Developer Guide](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html)

The project uses an Amazon CodeCatalyst environment to deploy a SAM application with AWS Lambda and Amazon API Gateway to an Amazon CloudFront URL.
After you create your project, you can view the repository, source code, and continuous integration and continuous delivery (CI/CD) workflow for your
project. After your workflow runs successfully, your deployed [AWS Cloud Development Kit (CDK)](https://docs.aws.amazon.com/cdk/v2/guide/home.html) application URL is available under the output for your workflow.

### Architecture overview

![Architecture diagram](https://d2oq83bpv90sqw.cloudfront.net/SAM-arch.png)

## Connections and permissions

Configure your AWS account connection from the **AWS accounts** tab in your Amazon CodeCatalyst space. Add AWS IAM roles to
the account extension to authorize project workflows to access AWS account resources.

The SAM application requires the following IAM roles to build and deploy the application:

### IAM role trust policy

\`\`\`
{
"Version": "2012-10-17",
"Statement": [
    {
        "Sid": "CodeCatalyst",
        "Effect": "Allow",
        "Principal": {
            "Service": [
                "codecatalyst-runner.amazonaws.com",
                "codecatalyst.amazonaws.com"
            ]
        },
        "Action": "sts:AssumeRole"
    }
]
}
\`\`\`

### Deploy role policy

Create a role based on the trust policy above, and add the following inline policy:

\`\`\`
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "iam:PassRole",
                "iam:DeleteRole",
                "iam:GetRole",
                "iam:TagRole",
                "iam:CreateRole",
                "iam:AttachRolePolicy",
                "iam:DetachRolePolicy",
                "cloudformation:*",
                "lambda:*",
                "apigateway:*"
            ],
            "Resource": "*"
        }
    ]
}
\`\`\`

_Note: You must update the policy if you add more resources.

### Build role policy

Create a role based on the trust policy above, and add the following inline policy:

\`\`\`
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "s3:*",
                "cloudformation:*"
            ],
            "Resource": "*"
        }
    ]
}
\`\`\`

## Project resources

After being successfully created, this project deploys the following AWS resources:

- AWS Lambda function(s) - A resource that invokes your code on a high-availability compute infrastructure without provisioning or managing servers. For
  more information on AWS Lambda, see the [AWS Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/welcome.html)

- Amazon API Gateway - A resource that creates, publishes, maintains, monitors, and secures REST, HTTP, and WebSocket APIs at any scale. For
  more information on API Gateway, see the
  [AWS API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html)

- IAM role(s) -  A resource that secures controlled access to AWS resources such as the AWS Lambda function(s). For more information on IAM, see the
  [AWS IAM User Guide](https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html)

The deployment status can be viewed in the project's workflow.

This blueprint creates the following Amazon CodeCatalyst resources:

- Source repository named \`ServerlessAppRepo\` - A Git repository to store, version, and manage the following project assets:
  - \`SamFirstEndpoint\` - Source code and supporting files for the Lambda function of the application, \`SamFirstEndpoint\` contains the following:
    - \`hello_world\` - Code for the AWS Lambda function of the application
    - \`events\` - Invocation events that you can use to invoke the AWS Lambda function
    - \`tests\` - Tests for the AWS Lambda function's code
  - \`template.yaml\` - The template that defines the application's AWS resources, including AWS Lambda functions, Amazon API Gateways, and IAM roles.
  - \`devfile.yaml\` - A devfile that defines Dev Environments or development environments that have been built for the cloud.

  For more information on source repositories, see the _Working with source repositories_ section in the **Amazon CodeCatalyst User Guide**.

- Workflows defined in \`.codecatalyst/workflows/build-and-release.yaml\`

  A workflow is an automated procedure that defines how to build, test, and deploy the serverless application. For more information, see the _Build,
  test, and deploy with workflows_ section of the **Amazon CodeCatalyst User Guide**.

- Environment(s) - An abstraction of infrastructure resources that deploy applications. You can use environments can be used to organize deployment actions into a production or non-production environment.

  For more information on environments, see the _Organizing deployments using environments_ section in the **Amazon CodeCatalyst User Guide**.

- Dev Environment - A cloud-based development environment. A Dev Environment must be manually created with the generated devfile using the Create Dev
  Environment operation in Amazon CodeCatalyst.

  For more information on creating Dev Environments, see the _Working with Dev Environments_ section in the **Amazon CodeCatalyst User Guide**.


## Using the SAM CLI to build and test locally

You can use the SAM Command Line Interface (CLI) to build and test your application locally. The SAM CLI is an extension of the AWS CLI that can emulate your AWS Lambda functions, application build environment, and API. It uses Docker to run your functions in an Amazon Linux environment that matches AWS Lambda. It can also emulate your application's build environment and API.
To work on the sample code generated, clone your project's repository to your local computer. For more information, see the _Cloning a source repository_ section in the Amazon CodeCatalyst User Guide.

To use the SAM CLI, install following tools into your workspace.

  * Install [AWS CLI](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)
  * Install [SAM CLI](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html)
  * Install [Docker community edition](https://hub.docker.com/search/?type=edition&offering=community)
  * Install [Python3.9](https://www.python.org/downloads/)

To build your application locally, run the following command in your shell:

\`\`\`
    sam build
\`\`\`

  The SAM CLI installs dependencies defined in the hello_world//requirements.txt file of the AWS Lambda function, creates a deployment package, and saves it in the \`.aws-sam/build\` folder.
  For more information on sam build, see the [Sam Build Command Reference Guide](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-build.html).
  Test a single function by invoking it directly with a test event. An event is a JSON document that represents the input that the function receives from the event source. Test events are included in the \`events\` folder in each function's folder in this project.

\`\`\`
  sam local invoke <functionName> --event <functionName>/events/event.json
\`\`\`

For more information on sam local invoke, see the [Sam Invoke Command Reference Guide](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-local-invoke.html).
The SAM CLI can also emulate your application's API. Run the \`sam local start-api\` command to run the API locally. The default port is 3000.

\`\`\`
  sam local start-api
  curl http://localhost:3000/
\`\`\`

For more information on sam local start-api, see the [Sam Local Invoke Start-Api Command Reference Guide](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-local-start-api.html).
The SAM CLI reads the application template to determine the API's routes and the functions that they invoke. The \`Events\` property on each function's definition includes the route and method for each path.

\`\`\`yaml
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get
\`\`\`


## Running tests
Tests are defined in the \`tests\` folder in this project. Use PIP to install the test dependencies and run tests.
\`\`\`
$ pip install -r tests/requirements.txt

# unit test
$ python -m pytest tests/unit -v

# integration test, requires deploying the stack first.
# Create the environment variable AWS_SAM_STACK_NAME with the name of the stack to test
$ AWS_SAM_STACK_NAME=<stack-name> python -m pytest tests/integration -v
\`\`\`


## Adding a resource to your serverless application
The application template uses SAM to define application resources. AWS SAM is an extension of AWS CloudFormation that uses a different syntax to configure common serverless application resources such as functions, triggers, and APIs. For resources not included in the [SAM specification](https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md), use the standard [AWS CloudFormation](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) resource types.

## Deploying your serverless application
The application is deployed through Amazon CodeCatalyst using the workflow defined in \`.codecatalyst/workflows/build-and-release.yaml\`. The workflow is triggered by pushes to the \`main\` branch of the source repository.
Triggers can be code pushes to a source repository branch or a pull request being created, merged, closed, or revised. For more information on adding or configuring workflow triggers, see the _Working with triggers_ section in the  Amazon CodeCatalyst User Guide.
The workflow builds your application, stores the build artifacts in a generated Amazon S3 bucket, and deploys your application to your project environment \`default_environment\` using the \`sam-stack-\` AWS Cloudformation stack.
For more information on deploying using workflows and organizing deployments by environment, see the _Deploying using CodeCatalyst workflows_ section in the Amazon CodeCatalyst User Guide.

If you still want to deploy without using CI/CD workflows, you can follow these instructions after building the application:
\`\`\`
  cd .aws-sam/build/
  sam package --output-template-file packaged.yaml --resolve-s3 --template-file template.yaml --region <aws-region>
  sam deploy --template-file /projects/ServerlessAppRepo/.aws-sam/build/packaged.yaml --stack-name sam-api-blueprints-test --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND
\`\`\`

## Additional Resources
See the Amazon CodeCatalyst User Guide for additional information on using the features and resources of Amazon CodeCatalyst.
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/__init__.py 1`] = `""`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/events/event.json 1`] = `
"{
  "body": "{\\"message\\": \\"hello world\\"}",
  "resource": "/hello",
  "path": "/hello",
  "httpMethod": "GET",
  "isBase64Encoded": false,
  "queryStringParameters": {
    "foo": "bar"
  },
  "pathParameters": {
    "proxy": "/path/to/resource"
  },
  "stageVariables": {
    "baz": "qux"
  },
  "headers": {
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
    "Accept-Encoding": "gzip, deflate, sdch",
    "Accept-Language": "en-US,en;q=0.8",
    "Cache-Control": "max-age=0",
    "CloudFront-Forwarded-Proto": "https",
    "CloudFront-Is-Desktop-Viewer": "true",
    "CloudFront-Is-Mobile-Viewer": "false",
    "CloudFront-Is-SmartTV-Viewer": "false",
    "CloudFront-Is-Tablet-Viewer": "false",
    "CloudFront-Viewer-Country": "US",
    "Host": "1234567890.execute-api.us-east-1.amazonaws.com",
    "Upgrade-Insecure-Requests": "1",
    "User-Agent": "Custom User Agent String",
    "Via": "1.1 08f323deadbeefa7af34d5feb414ce27.cloudfront.net (CloudFront)",
    "X-Amz-Cf-Id": "cDehVQoZnx43VYQb9j2-nvCh-9z396Uhbp027Y2JvkCPNLmGJHqlaA==",
    "X-Forwarded-For": "127.0.0.1, 127.0.0.2",
    "X-Forwarded-Port": "443",
    "X-Forwarded-Proto": "https"
  },
  "requestContext": {
    "accountId": "123456789012",
    "resourceId": "123456",
    "stage": "prod",
    "requestId": "c6af9ac6-7b61-11e6-9a41-93e8deadbeef",
    "requestTime": "09/Apr/2015:12:34:56 +0000",
    "requestTimeEpoch": 1428582896000,
    "identity": {
      "cognitoIdentityPoolId": null,
      "accountId": null,
      "cognitoIdentityId": null,
      "caller": null,
      "accessKey": null,
      "sourceIp": "127.0.0.1",
      "cognitoAuthenticationType": null,
      "cognitoAuthenticationProvider": null,
      "userArn": null,
      "userAgent": "Custom User Agent String",
      "user": null
    },
    "path": "/prod/hello",
    "resourcePath": "/hello",
    "httpMethod": "POST",
    "apiId": "1234567890",
    "protocol": "HTTP/1.1"
  }
}
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/hello_world/__init__.py 1`] = `""`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/hello_world/app.py 1`] = `
"import json

# import requests


def lambda_handler(event, context):
    """Sample pure Lambda function

    Parameters
    ----------
    event: dict, required
        API Gateway Lambda Proxy Input Format

        Event doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#api-gateway-simple-proxy-for-lambda-input-format

    context: object, required
        Lambda Context runtime methods and attributes

        Context doc: https://docs.aws.amazon.com/lambda/latest/dg/python-context-object.html

    Returns
    ------
    API Gateway Lambda Proxy Output Format: dict

        Return doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
    """

    # try:
    #     ip = requests.get("http://checkip.amazonaws.com/")
    # except requests.RequestException as e:
    #     # Send some context about this error to Lambda Logs
    #     print(e)

    #     raise e

    return {
        "statusCode": 200,
        "body": json.dumps({
            "message": "hello world",
            # "location": ip.text.replace("\\n", "")
        }),
    }
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/hello_world/requirements.txt 1`] = `"requests"`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/tests/__init__.py 1`] = `""`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/tests/integration/__init__.py 1`] = `""`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/tests/integration/test_api_gateway.py 1`] = `
"import os

import boto3
import pytest
import requests

"""
Make sure env variable AWS_SAM_STACK_NAME exists with the name of the stack we are going to test. 
"""


class TestApiGateway:

    @pytest.fixture()
    def api_gateway_url(self):
        """ Get the API Gateway URL from Cloudformation Stack outputs """
        stack_name = os.environ.get("AWS_SAM_STACK_NAME")

        if stack_name is None:
            raise ValueError('Please set the AWS_SAM_STACK_NAME environment variable to the name of your stack')

        client = boto3.client("cloudformation")

        try:
            response = client.describe_stacks(StackName=stack_name)
        except Exception as e:
            raise Exception(
                f"Cannot find stack {stack_name} \\n" f'Please make sure a stack with the name "{stack_name}" exists'
            ) from e

        stacks = response["Stacks"]
        stack_outputs = stacks[0]["Outputs"]
        api_outputs = [output for output in stack_outputs if output["OutputKey"] == "HelloWorldApi"]

        if not api_outputs:
            raise KeyError(f"HelloWorldAPI not found in stack {stack_name}")

        return api_outputs[0]["OutputValue"]  # Extract url from stack outputs

    def test_api_gateway(self, api_gateway_url):
        """ Call the API Gateway endpoint and check the response """
        response = requests.get(api_gateway_url)

        assert response.status_code == 200
        assert response.json() == {"message": "hello world"}
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/tests/requirements.txt 1`] = `
"pytest
pytest-cov
pytest-mock
boto3
requests
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/tests/unit/__init__.py 1`] = `""`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/SamFirstEndpoint/tests/unit/test_handler.py 1`] = `
"import json

import pytest

from hello_world import app


@pytest.fixture()
def apigw_event():
    """ Generates API GW Event"""

    return {
        "body": '{ "test": "body"}',
        "resource": "/{proxy+}",
        "requestContext": {
            "resourceId": "123456",
            "apiId": "1234567890",
            "resourcePath": "/{proxy+}",
            "httpMethod": "POST",
            "requestId": "c6af9ac6-7b61-11e6-9a41-93e8deadbeef",
            "accountId": "123456789012",
            "identity": {
                "apiKey": "",
                "userArn": "",
                "cognitoAuthenticationType": "",
                "caller": "",
                "userAgent": "Custom User Agent String",
                "user": "",
                "cognitoIdentityPoolId": "",
                "cognitoIdentityId": "",
                "cognitoAuthenticationProvider": "",
                "sourceIp": "127.0.0.1",
                "accountId": "",
            },
            "stage": "prod",
        },
        "queryStringParameters": {"foo": "bar"},
        "headers": {
            "Via": "1.1 08f323deadbeefa7af34d5feb414ce27.cloudfront.net (CloudFront)",
            "Accept-Language": "en-US,en;q=0.8",
            "CloudFront-Is-Desktop-Viewer": "true",
            "CloudFront-Is-SmartTV-Viewer": "false",
            "CloudFront-Is-Mobile-Viewer": "false",
            "X-Forwarded-For": "127.0.0.1, 127.0.0.2",
            "CloudFront-Viewer-Country": "US",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
            "Upgrade-Insecure-Requests": "1",
            "X-Forwarded-Port": "443",
            "Host": "1234567890.execute-api.us-east-1.amazonaws.com",
            "X-Forwarded-Proto": "https",
            "X-Amz-Cf-Id": "aaaaaaaaaae3VYQb9jd-nvCd-de396Uhbp027Y2JvkCPNLmGJHqlaA==",
            "CloudFront-Is-Tablet-Viewer": "false",
            "Cache-Control": "max-age=0",
            "User-Agent": "Custom User Agent String",
            "CloudFront-Forwarded-Proto": "https",
            "Accept-Encoding": "gzip, deflate, sdch",
        },
        "pathParameters": {"proxy": "/examplepath"},
        "httpMethod": "POST",
        "stageVariables": {"baz": "qux"},
        "path": "/examplepath",
    }


def test_lambda_handler(apigw_event):

    ret = app.lambda_handler(apigw_event, "")
    data = json.loads(ret["body"])

    assert ret["statusCode"] == 200
    assert "message" in ret["body"]
    assert data["message"] == "hello world"
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/devfile.yaml 1`] = `
"schemaVersion: 2.0.0
metadata:
  name: aws-universal
  version: 1.0.1
  displayName: AWS Universal
  description: Stack with AWS Universal Tooling
  tags:
    - aws
    - a12
  projectType: aws
components:
  - name: aws-runtime
    container:
      image: public.ecr.aws/aws-mde/universal-image:1.0
      mountSources: true
      volumeMounts:
        - name: docker-store
          path: /var/lib/docker
  - name: docker-store
    volume:
      size: 16Gi
events:
  postStart:
    - bootstrap-and-build
commands:
  - id: bootstrap-and-build
    exec:
      commandLine: . ./.codecatalyst/scripts/bootstrap.sh && .
        ./.codecatalyst/scripts/run-tests.sh && sam build --template-file
        template.yaml --use-container --build-image
        amazon/aws-sam-cli-build-image-python3.9
      workingDir: $PROJECT_SOURCE
      component: aws-runtime
"
`;

exports[`Blueprint snapshots python39.json configuration matches src/ServerlessAppRepo/template.yaml 1`] = `
"Transform: AWS::Serverless-2016-10-31
Description: lambdas
Globals:
  Function:
    Timeout: 20
Resources:
  SamFirstEndpointFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SamFirstEndpoint/hello_world/
      Runtime: python3.9
      Handler: app.lambda_handler
      Description: SamFirstEndpoint
      Events:
          SamFirstEndpoint:
             Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
             Properties:
                Path: /SamFirstEndpoint
                Method: get
Outputs:
# ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
# Find out more about other implicit resources you can reference within SAM
# https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  SamFirstEndpointApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://\${ServerlessRestApi}.execute-api.\${AWS::Region}.amazonaws.com/Prod/SamFirstEndpoint/"
  SamFirstEndpointFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt SamFirstEndpointFunction.Arn
  SamFirstEndpointFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt SamFirstEndpointFunctionRole.Arn"
`;
