export const readmeContents = `
## Blueprints
** information on what a blueprint is (Should be a good definition, definitely a work in progress)

Blueprints are a project generation tool. Blueprints will generate source code and configuaration files such as package.json, Makefile, eslint, etc. for your project.
Blueprints can also generate files supporting aws resources such as cdk constructs, sam templates, . Files generated by blueprints can be regenerated with updates that users can pull request into their repository. 
For more documentation on blueprints, please visit *insert link to blueprints documentation*

## This Blueprint:
** what files/folders are generated by this blueprint

Generates a serverless application project. This blueprint will generate the source code for a set of lambda functions using \`sam init\` and configuration files for the project.
 It will generate the following files and folders: 
- src/lambdas - Contains subdirectories of code for the applications Lambda functions.
- src/lambdas/<functionName> - Files and folders for the application's Lambda functions. Each will be named after the lambda function it contains. 
- src/lambdas/.aws/workflows/build.yaml - The workflow template of the project
- src/lambdas/template.yaml - A template that defines the applications AWS resources
- README.md - Information on serverless applications, what files/folders are in the project, and how to build and test the project locally using the sam cli



## Serverless Application/SAM
** what is a serverless application?

A *serverless application* is a combination of Lambda functions, event sources, and other resources that work together to perform tasks. Note that a serverless application is more than just a Lambda functionâ€”it can include additional resources such as APIs, databases, and event source mappings.
For more information on serverless applications, please visit the AWS Serverless Application Model (SAM) [developer guide]https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html

## Using the SAM CLI to build and test locally
** information on the tools needed to run the sam cli and how to use it to build/test the application locally
** The readme created by sam init linked after this blueprint is where this information comes from

The Serverless Application Model Command Line Interface (SAM CLI) is an extension of the AWS CLI that adds functionality for building and testing Lambda applications. It uses Docker to run your functions in an Amazon Linux environment that matches Lambda. It can also emulate your application's build environment and API.

To use the SAM CLI, you need the following tools.
* SAM CLI - [Install the SAM CLI](_https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html_)
* [Python 3 installed](_https://www.python.org/downloads/_)
* Docker - [Install Docker community edition](_https://hub.docker.com/search/?type=edition&offering=community_)

To build your application locallyuse the following command in your shell
\`\`\`
$ sam build
\`\`\`
For more information on sam build, visit its [reference guide]https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-build.html

Test a single function by invoking it directly with a test event. An event is a JSON document that represents the input that the function receives from the event source. Test events are included in the \`events\` folder for each function in this project.
\`\`\`
$ sam local invoke <functionName> --event src/lambdas/<functionName>/events/event.json
\`\`\`
For more information on sam local invoke, visit its [reference guide]https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-local-invoke.html

The SAM CLI can also emulate your applications API. Use the sam local start-api to run the API locally on port 3000. 
\`\`\`
$ sam local start-api --port 3000
\`\`\`
The SAM CLI reads the application template to determine the API's routes and the functions that they invoke. The \`Events\` property on each function's definition includes the route and method for each path.

\`\`\`yaml
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get
\`\`\`

For more information on sam local start-api, visit its [reference guide]https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-local-start-api.html
 
Additional information about sam can be found in its [developer guide]https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html
 
https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html
## How to deploy the serverless application
** Unsure how to fill out this section for now, as users would need access to their shadow account to deploy through sam deploy
** The current idea of how they would deploy their serverless application is through a Code.AWS workflow that would deploy the resources defined in template.yaml

-- The aws resources defined in template.yaml are not deployed using sam deploy and should be deployed using code.aws workflows. 
`


//give some command line options for sam build as well
//Todo: give credit to the original authors of the sam template readme as they have alot of the information I would use right away
//TODO: add dependencies that each language function is going to need to be built
/*
.Net core 3.1 -> https://dotnet.microsoft.com/download/dotnet/3.1
Ruby/Bundler needed https://www.ruby-lang.org/en/downloads/   https://docs.aws.amazon.com/sdk-for-ruby/v3/developer-guide/setup-install.html https://bundler.io/

java 11 https://www.oracle.com/java/technologies/javase/jdk11-archive-downloads.html ^ done up there technically

node.js/npm https://docs.npmjs.com/downloading-and-installing-node-js-and-npm, https://nodejs.org/en/download/releases/

python3/pip https://www.python.org/downloads/
*/